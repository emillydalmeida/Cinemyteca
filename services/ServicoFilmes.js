import servicoSupabase from './SupabaseServico.js';

class ServicoFilmes {
  constructor() {
    this.inicializado = false;
  }

  async inicializar() {
    if (this.inicializado) return true;
    
    try {
      const conexaoOk = await servicoSupabase.verificarConexao();
      if (!conexaoOk) {
        throw new Error('N√£o foi poss√≠vel conectar ao Supabase');
      }
      
      this.inicializado = true;
      console.log('‚úÖ ServicoFilmes inicializado com Supabase');
      return true;
    } catch (error) {
      console.error('‚ùå Erro ao inicializar ServicoFilmes:', error);
      return false;
    }
  }

  async obterFilmesPorGenero(genero) {
    await this.inicializar();
    
    try {
      console.log(`üîç Buscando filmes do g√™nero: ${genero}`);
      const filmes = await servicoSupabase.obterFilmesPorGenero(genero);
      console.log(`‚úÖ Encontrados ${filmes.length} filmes para ${genero}`);
      return filmes;
    } catch (error) {
      console.error(`‚ùå Erro ao buscar filmes do g√™nero ${genero}:`, error);
      return [];
    }
  }

  async adicionarFilme(genero, dadosFilme) {
    await this.inicializar();
    
    try { 
      const existe = await this.verificarSeFilmeExiste(genero, dadosFilme.id);
      if (existe) {
        throw new Error('Filme j√° foi adicionado a esta categoria');
      }
 
      const filmeCompleto = {
        ...dadosFilme,
        genero: genero,
        assistidoEm: new Date().toISOString(),
        criadoEm: new Date().toISOString()
      };

      const sucesso = await servicoSupabase.adicionarFilme(genero, filmeCompleto);
      if (sucesso) {
        console.log(`‚úÖ Filme "${dadosFilme.title}" adicionado ao g√™nero ${genero}`);
        return true;
      }
      
      throw new Error('Falha ao adicionar filme no Supabase');
    } catch (error) {
      console.error('‚ùå Erro ao adicionar filme:', error);
      throw error;
    }
  }

  async removerFilme(genero, filmeId) {
    await this.inicializar();
    
    try {
      console.log(`üóëÔ∏è Removendo filme ID ${filmeId} do g√™nero ${genero}`);
      const sucesso = await servicoSupabase.removerFilme(genero, filmeId);
      
      if (sucesso) {
        console.log(`‚úÖ Filme ID ${filmeId} removido com sucesso`);
        return true;
      }
      
      throw new Error('Falha ao remover filme do Supabase');
    } catch (error) {
      console.error('‚ùå Erro ao remover filme:', error);
      throw error;
    }
  }

  async atualizarFilme(genero, filmeAtualizado) {
    await this.inicializar();
    
    try {
      const filmeComData = {
        ...filmeAtualizado,
        atualizadoEm: new Date().toISOString()
      };

      const sucesso = await servicoSupabase.atualizarFilme(genero, filmeComData);
      if (sucesso) {
        console.log(`‚úÖ Filme ID ${filmeAtualizado.id} atualizado`);
        return true;
      }
      
      throw new Error('Falha ao atualizar filme no Supabase');
    } catch (error) {
      console.error('‚ùå Erro ao atualizar filme:', error);
      throw error;
    }
  }

  async verificarSeFilmeExiste(genero, filmeId) {
    await this.inicializar();
    
    try {
      return await servicoSupabase.verificarSeFilmeExiste(genero, filmeId);
    } catch (error) {
      console.error('‚ùå Erro ao verificar exist√™ncia do filme:', error);
      return false;
    }
  }

  async obterEstatisticas() {
    await this.inicializar();
    
    try {
      console.log('üìä Calculando estat√≠sticas...');
      const stats = await servicoSupabase.obterEstatisticas();
      console.log('‚úÖ Estat√≠sticas calculadas');
      return stats;
    } catch (error) {
      console.error('‚ùå Erro ao obter estat√≠sticas:', error);
      return {
        totalFilmes: 0,
        notaMedia: 0,
        porGenero: {}
      };
    }
  }

  async limparDuplicatas() {
    await this.inicializar();
    
    try {
      console.log('üßπ Limpando duplicatas...');
      const sucesso = await servicoSupabase.limparDuplicatas();
      console.log('‚úÖ Limpeza de duplicatas conclu√≠da');
      return sucesso;
    } catch (error) {
      console.error('‚ùå Erro ao limpar duplicatas:', error);
      return false;
    }
  }

  obterStatus() {
    return {
      tipo: 'supabase-only',
      conexao: this.inicializado,
      descricao: 'Usando apenas Supabase (migra√ß√£o conclu√≠da)'
    };
  }
}
 
const servicoFilmes = new ServicoFilmes();

export default servicoFilmes;
